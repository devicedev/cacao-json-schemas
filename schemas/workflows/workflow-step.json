{
  "$id": "https://raw.githubusercontent.com/oasis-open/cacao-json-schemas/main/schemas/workflows/workflow-step.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "workflow-step",
  "description": "Workflows contain a series of steps that are stored in a dictionary (see the workflow property in section 3.1), where the key is the step ID and the value is a workflow step. These workflow steps along with the associated commands form the building blocks for playbooks and are used to control the commands that need to be executed. Workflows steps are processed either sequentially, in parallel, or both depending on the type of steps required by the playbook. In addition to simple processing, workflow steps MAY also contain conditional and/or temporal operations to control the execution of the playbook. \n\nConditional processing means executing steps or commands after some sort of condition is met. Temporal processing means executing steps or commands either during a certain time window or after some period of time has passed. \n\nThis section defines the various workflow steps and how they may be used to define a playbook. \n\nEach workflow step contains base properties that are common across all steps. These common properties are defined in the following table. The determination of a step being successful,failing, or completing is implementation specific and is out of scope for this specification, but details MAY be included in the description property.",
  "type": "object",
  "properties": {
    "type": {
      "$ref": "#/$defs/workflow-step-type-enum",
      "description": "The type of workflow step being used. The value for this property MUST come from the 'workflow-step-type-enum' enumeration."
    },
    "name": {
      "type": "string",
      "description": "A name for this step that is meant to be displayed in a user interface or captured in a log message."
    },
    "description": {
      "type": "string",
      "description": "More details, context, and possibly an explanation about what this step does and tries to accomplish."
    },
    "on_completion": {
      "$ref": "../data-types/identifier.json",
      "description": "The ID of the next step to be processed upon completion of the defined commands. \n\nThe value of this property MUST represent a CACAO workflow step object. \n\nIf this property is defined, then on_success and on_failure MUST NOT be defined."
    },
    "on_success": {
      "$ref": "../data-types/identifier.json",
      "description": "The ID of the next step to be processed if this step completes successfully. \n\nThe value of this property MUST represent a CACAO workflow step object. \n\nIf this property is defined, then on_completion MUST NOT be defined. This property MUST NOT be used on the 'start' or 'end' steps."
    },
    "on_failure": {
      "$ref": "../data-types/identifier.json",
      "description": "The ID of the next step to be processed if this step fails to complete successfully. \n\nThe value of this property MUST represent a CACAO workflow step object. \n\nIf omitted and a failure occurs, then the playbook's exception handler found in the workflow_exception property at the Playbook level will be invoked. \n\nIf this property is defined, then on_completion MUST NOT be defined. This property MUST NOT be used on the 'start' or 'end' steps."
    }
  },
  "required": ["type", "name", "description"],
  "dependencies": {



    "on_completion": {
      "not": { "required": ["on_success", "on_failure"] }
    },
    "on_success": {
      "not": { "required": ["on_completion"] }
    },
    "on_failure": {
      "not": { "required": ["on_completion"] }
    }
  },
  "$defs": {
    "workflow-step-type-enum": {
      "type": "string",
      "enum": [
        "start",
        "end",
        "action",
        "playbook-action",
        "parallel",
        "if-condition",
        "while-condition",
        "switch-condition"
      ]
    }
  }
}
